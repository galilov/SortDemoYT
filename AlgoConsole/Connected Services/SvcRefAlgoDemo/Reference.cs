//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlgoConsole.SvcRefAlgoDemo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SvcRefAlgoDemo.IAlgoDemoService")]
    public interface IAlgoDemoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/GetItemCount", ReplyAction="http://tempuri.org/IAlgoDemoService/GetItemCountResponse")]
        int GetItemCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/GetItemCount", ReplyAction="http://tempuri.org/IAlgoDemoService/GetItemCountResponse")]
        System.Threading.Tasks.Task<int> GetItemCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/GetItem", ReplyAction="http://tempuri.org/IAlgoDemoService/GetItemResponse")]
        int GetItem(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/GetItem", ReplyAction="http://tempuri.org/IAlgoDemoService/GetItemResponse")]
        System.Threading.Tasks.Task<int> GetItemAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/SwapItems", ReplyAction="http://tempuri.org/IAlgoDemoService/SwapItemsResponse")]
        void SwapItems(int index1, int index2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/SwapItems", ReplyAction="http://tempuri.org/IAlgoDemoService/SwapItemsResponse")]
        System.Threading.Tasks.Task SwapItemsAsync(int index1, int index2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/SetItem", ReplyAction="http://tempuri.org/IAlgoDemoService/SetItemResponse")]
        void SetItem(int index, byte val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/SetItem", ReplyAction="http://tempuri.org/IAlgoDemoService/SetItemResponse")]
        System.Threading.Tasks.Task SetItemAsync(int index, byte val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/Select", ReplyAction="http://tempuri.org/IAlgoDemoService/SelectResponse")]
        void Select(int index, int argb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/Select", ReplyAction="http://tempuri.org/IAlgoDemoService/SelectResponse")]
        System.Threading.Tasks.Task SelectAsync(int index, int argb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/Unselect", ReplyAction="http://tempuri.org/IAlgoDemoService/UnselectResponse")]
        void Unselect(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/Unselect", ReplyAction="http://tempuri.org/IAlgoDemoService/UnselectResponse")]
        System.Threading.Tasks.Task UnselectAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/UnselectAll", ReplyAction="http://tempuri.org/IAlgoDemoService/UnselectAllResponse")]
        void UnselectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlgoDemoService/UnselectAll", ReplyAction="http://tempuri.org/IAlgoDemoService/UnselectAllResponse")]
        System.Threading.Tasks.Task UnselectAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlgoDemoServiceChannel : AlgoConsole.SvcRefAlgoDemo.IAlgoDemoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlgoDemoServiceClient : System.ServiceModel.ClientBase<AlgoConsole.SvcRefAlgoDemo.IAlgoDemoService>, AlgoConsole.SvcRefAlgoDemo.IAlgoDemoService {
        
        public AlgoDemoServiceClient() {
        }
        
        public AlgoDemoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AlgoDemoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlgoDemoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlgoDemoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetItemCount() {
            return base.Channel.GetItemCount();
        }
        
        public System.Threading.Tasks.Task<int> GetItemCountAsync() {
            return base.Channel.GetItemCountAsync();
        }
        
        public int GetItem(int index) {
            return base.Channel.GetItem(index);
        }
        
        public System.Threading.Tasks.Task<int> GetItemAsync(int index) {
            return base.Channel.GetItemAsync(index);
        }
        
        public void SwapItems(int index1, int index2) {
            base.Channel.SwapItems(index1, index2);
        }
        
        public System.Threading.Tasks.Task SwapItemsAsync(int index1, int index2) {
            return base.Channel.SwapItemsAsync(index1, index2);
        }
        
        public void SetItem(int index, byte val) {
            base.Channel.SetItem(index, val);
        }
        
        public System.Threading.Tasks.Task SetItemAsync(int index, byte val) {
            return base.Channel.SetItemAsync(index, val);
        }
        
        public void Select(int index, int argb) {
            base.Channel.Select(index, argb);
        }
        
        public System.Threading.Tasks.Task SelectAsync(int index, int argb) {
            return base.Channel.SelectAsync(index, argb);
        }
        
        public void Unselect(int index) {
            base.Channel.Unselect(index);
        }
        
        public System.Threading.Tasks.Task UnselectAsync(int index) {
            return base.Channel.UnselectAsync(index);
        }
        
        public void UnselectAll() {
            base.Channel.UnselectAll();
        }
        
        public System.Threading.Tasks.Task UnselectAllAsync() {
            return base.Channel.UnselectAllAsync();
        }
    }
}
